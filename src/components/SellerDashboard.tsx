
import { useState } from "react";
import { Upload, Camera, Wand2, Check, DollarSign, Package, Mic, MicOff, LogIn } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { toast } from "sonner";
import { useImageAnalysis, useCreateProduct, useVoicePriceUpdate, useAuth } from "@/hooks/useApi";
import type { ImageAnalysisResult, Product } from "@/lib/api";

const SellerDashboard = () => {
  const { user, isAuthenticated } = useAuth();
  const imageAnalysisMutation = useImageAnalysis();
  const createProductMutation = useCreateProduct();
  const voicePriceUpdateMutation = useVoicePriceUpdate();
  
  const [uploadedImages, setUploadedImages] = useState<string[]>([]);
  const [aiGenerating, setAiGenerating] = useState(false);
  const [listingGenerated, setListingGenerated] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<ImageAnalysisResult | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  
  // Editable state for form fields
  const [editableTitle, setEditableTitle] = useState("");
  const [editableDescription, setEditableDescription] = useState("");
  const [editableCondition, setEditableCondition] = useState("");
  const [editablePrice, setEditablePrice] = useState("");

  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files && files.length > 0) {
      const file = files[0];
      const newImages = Array.from(files).map(file => URL.createObjectURL(file));
      setUploadedImages(prev => [...prev, ...newImages]);
      
      setAiGenerating(true);
      toast.success("Images uploaded! AI is analyzing your product...");
      
      try {
        const result = await imageAnalysisMutation.mutateAsync(file);
        setAnalysisResult(result);
        setAiGenerating(false);
        setListingGenerated(true);
        toast.success("Perfect listing generated by AI!");
      } catch (error) {
        setAiGenerating(false);
        toast.error("Failed to analyze image. Please try again.");
        console.error("Image analysis error:", error);
      }
    }
  };

  const handleVoiceProductUpdate = async () => {
    if (!navigator.mediaDevices) {
      toast.error("Voice recording not supported in this browser");
      return;
    }

    if (isRecording) {
      setIsRecording(false);
      return;
    }

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const audioChunks: Blob[] = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
        const audioFile = new File([audioBlob], 'voice_product_update.wav', { type: 'audio/wav' });

        try {
          const response = await voicePriceUpdateMutation.mutateAsync({
            audioFile,
            productId: 1 // This would be the actual product ID
          });

          if (response.success) {
            toast.success(response.message);
            // Refresh the product data if needed
          } else {
            toast.error(response.message || "Failed to update product");
          }
        } catch (error) {
          toast.error("Failed to update product with voice");
          console.error("Voice product update error:", error);
        }
      };

      mediaRecorder.start();
      setIsRecording(true);
      toast.success("ðŸŽ¤ Recording... Say your updates! Click again to stop");

      // Auto-stop after 15 seconds
      setTimeout(() => {
        if (isRecording) {
          mediaRecorder.stop();
          stream.getTracks().forEach(track => track.stop());
          setIsRecording(false);
        }
      }, 15000);
    } catch (error) {
      toast.error("Failed to start recording");
      console.error("Recording error:", error);
    }
  };

  const handlePublishListing = async () => {
    if (!analysisResult) return;

    try {
      const productData: Partial<Product> = {
        name: editableTitle || analysisResult.title,
        description: editableDescription || analysisResult.description,
        price: parseFloat(editablePrice || analysisResult.suggested_price.toString()),
        condition: editableCondition || analysisResult.condition,
        category_id: 1, // Default category
        stock_quantity: 1,
        specifications: analysisResult.specifications,
        tags: analysisResult.tags,
        is_active: true,
        is_featured: false
      };

      await createProductMutation.mutateAsync(productData);
      toast.success("Product published successfully!");
    } catch (error) {
      toast.error("Failed to publish product");
      console.error("Publish error:", error);
    }
  };

  const mockListing = {
    title: "Vintage Nike Air Jordan 1 High OG 'Chicago' - Size 10",
    description: "Authentic 1985 Nike Air Jordan 1 in the iconic Chicago colorway. Shows minimal wear with original box and all accessories. This classic basketball shoe features premium leather construction and the timeless red, white, and black color scheme that made it legendary.",
    condition: "Excellent (8.5/10)",
    suggestedPrice: "$1,200",
    category: "Sneakers & Athletic Shoes",
    estimatedValue: "$1,000 - $1,400"
  };

  // Debug logging
  console.log('SellerDashboard Debug:', { isAuthenticated, user, userRole: user?.role });

  // Check if user is authenticated and is a seller
  if (!isAuthenticated || user?.role !== 'seller') {
    return (
      <div className="text-center py-12">
        <div className="w-16 h-16 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
          <LogIn className="w-8 h-8 text-white" />
        </div>
        <h3 className="text-xl font-semibold text-gray-900 mb-2">Seller Access Required</h3>
        <p className="text-gray-600 mb-6 max-w-md mx-auto">
          You need to be logged in as a seller to access the seller dashboard. 
          Please sign in with a seller account to continue.
        </p>
        <p className="text-sm text-gray-500 mb-4">
          Debug: isAuthenticated={isAuthenticated.toString()}, userRole={user?.role || 'undefined'}
        </p>
        <Button 
          className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
          onClick={() => window.location.reload()}
        >
          Sign In as Seller
        </Button>
      </div>
    );
  }

  return (
    <div className="grid lg:grid-cols-2 gap-8">
      {/* Upload Section */}
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Camera className="w-5 h-5 text-blue-600" />
            Upload Product Photos
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors">
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleImageUpload}
              className="hidden"
              id="image-upload"
            />
            <label htmlFor="image-upload" className="cursor-pointer">
              <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-lg font-medium text-gray-600 mb-2">
                Drop your product photos here
              </p>
              <p className="text-sm text-gray-500">
                AI will analyze and create the perfect listing
              </p>
            </label>
          </div>

          {uploadedImages.length > 0 && (
            <div>
              <p className="font-medium text-gray-700 mb-2">Uploaded Images:</p>
              <div className="grid grid-cols-3 gap-2">
                {uploadedImages.map((image, index) => (
                  <img
                    key={index}
                    src={image}
                    alt={`Product ${index + 1}`}
                    className="w-full h-20 object-cover rounded-lg border"
                  />
                ))}
              </div>
            </div>
          )}

          {aiGenerating && (
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Wand2 className="w-4 h-4 text-blue-600 animate-spin" />
                <span className="font-medium text-blue-800">AI Analyzing Product...</span>
              </div>
              <Progress value={imageAnalysisMutation.isPending ? 75 : 100} className="h-2" />
              <p className="text-sm text-blue-600 mt-2">
                {imageAnalysisMutation.isPending 
                  ? "Identifying product details, condition, and market value..."
                  : "Analysis complete!"
                }
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Generated Listing */}
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wand2 className="w-5 h-5 text-purple-600" />
            AI-Generated Listing
            {listingGenerated && (
              <Badge className="bg-green-100 text-green-700 border-green-200">
                <Check className="w-3 h-3 mr-1" />
                Ready
              </Badge>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {!listingGenerated ? (
            <div className="text-center py-8 text-gray-500">
              <Package className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <p>Upload product photos to see AI magic!</p>
            </div>
          ) : analysisResult ? (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                <input
                  type="text"
                  value={editableTitle || analysisResult.title}
                  onChange={(e) => setEditableTitle(e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg bg-white text-gray-900 font-medium cursor-text hover:border-blue-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-colors"
                  placeholder="Click to edit title..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea
                  value={editableDescription || analysisResult.description}
                  onChange={(e) => setEditableDescription(e.target.value)}
                  rows={4}
                  className="w-full p-3 border border-gray-300 rounded-lg bg-white text-gray-900 font-medium resize-none cursor-text hover:border-blue-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-colors"
                  placeholder="Click to edit description..."
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Condition</label>
                  <input
                    type="text"
                    value={editableCondition || analysisResult.condition}
                    onChange={(e) => setEditableCondition(e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-lg bg-white text-gray-900 font-medium cursor-text hover:border-blue-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-colors"
                    placeholder="Click to edit condition..."
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">AI Suggested Price</label>
                  <div className="flex items-center p-3 border border-gray-300 rounded-lg bg-green-50 hover:border-blue-400 focus-within:border-blue-500 focus-within:ring-2 focus-within:ring-blue-200 transition-colors">
                    <DollarSign className="w-4 h-4 text-green-600 mr-1" />
                    <input
                      type="text"
                      value={editablePrice || analysisResult.suggested_price}
                      onChange={(e) => setEditablePrice(e.target.value)}
                      className="font-semibold text-green-700 bg-transparent border-none outline-none cursor-text w-full"
                      placeholder="Click to edit price..."
                    />
                  </div>
                </div>
              </div>

              {/* Voice Update Section */}
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div className="flex items-center gap-2 mb-3">
                  <Mic className="w-5 h-5 text-blue-600" />
                  <h3 className="font-semibold text-blue-800">Voice Commands</h3>
                </div>
                <p className="text-sm text-blue-700 mb-3">
                  Use voice commands to update any product field:
                </p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-xs text-blue-600">
                  <div>â€¢ "Change price to $99.99"</div>
                  <div>â€¢ "Update name to iPhone 15 Pro"</div>
                  <div>â€¢ "Set description to latest model"</div>
                  <div>â€¢ "Change condition to used"</div>
                  <div>â€¢ "Update stock to 25 units"</div>
                  <div>â€¢ "Change brand to Apple"</div>
                </div>
                <Button
                  onClick={handleVoiceProductUpdate}
                  className="mt-3 w-full bg-blue-600 hover:bg-blue-700 text-white"
                  disabled={isRecording}
                >
                  {isRecording ? (
                    <>
                      <MicOff className="w-4 h-4 mr-2" />
                      Stop Recording
                    </>
                  ) : (
                    <>
                      <Mic className="w-4 h-4 mr-2" />
                      Voice Update
                    </>
                  )}
                </Button>
              </div>

              <div className="bg-gray-50 p-4 rounded-lg">
                <p className="text-sm text-gray-600 mb-2">
                  <strong>Market Analysis:</strong> {analysisResult.estimated_value}
                </p>
                <p className="text-sm text-gray-600">
                  <strong>Category:</strong> {analysisResult.category}
                </p>
                {analysisResult.tags.length > 0 && (
                  <div className="mt-2">
                    <strong className="text-sm text-gray-600">Tags:</strong>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {analysisResult.tags.map((tag, index) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <div className="flex gap-2">
                <Button 
                  onClick={handleVoiceProductUpdate}
                  variant="outline"
                  className={isRecording ? "bg-red-100 border-red-300 text-red-600" : ""}
                  disabled={voicePriceUpdateMutation.isPending}
                >
                  {isRecording ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
                  Voice Update
                </Button>
                
                <Button 
                  onClick={handlePublishListing}
                  className="flex-1 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
                  disabled={createProductMutation.isPending}
                >
                  {createProductMutation.isPending ? (
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  ) : (
                    <Check className="w-4 h-4 mr-2" />
                  )}
                  Publish Listing
                </Button>
              </div>
            </>
          ) : null}
        </CardContent>
      </Card>
    </div>
  );
};

export default SellerDashboard;
